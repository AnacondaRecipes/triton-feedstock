From e50454a16bafa90bcd028b2eb6a6a173bd6e15db Mon Sep 17 00:00:00 2001
From: Tobias Fischer <info@tobiasfischer.info>
Date: Sun, 7 May 2023 14:55:38 +1000
Subject: [PATCH 8/8] Search for libs in CONDA_PREFIX instead of third_party
 directory

---
 lib/Target/LLVMIR/LLVMIRTranslation.cpp | 36 +++++++++----------------
 python/triton/compiler.py               |  6 +++--
 python/triton/language/libdevice.py     |  3 ++-
 python/triton/tools/build_extern.py     |  3 ++-
 4 files changed, 21 insertions(+), 27 deletions(-)

Index: triton/lib/Target/LLVMIR/LLVMIRTranslation.cpp
===================================================================
--- triton.orig/lib/Target/LLVMIR/LLVMIRTranslation.cpp	2023-11-02 16:11:36.065152000 -0500
+++ triton/lib/Target/LLVMIR/LLVMIRTranslation.cpp	2023-11-03 15:21:45.556179664 -0500
@@ -188,31 +188,20 @@
     // Then native code is in `triton/_C/libtriton.so` and libdevice in
     // `triton/third_party/cuda/lib/libdevice.10.bc`
     static const auto this_library_path = getThisLibraryPath();
-    static const auto runtime_path =
-        this_library_path.parent_path().parent_path() / "third_party" / "cuda" /
-        "lib" / "libdevice.10.bc";
-    if (fs::exists(runtime_path)) {
-      externLibs.try_emplace(libdevice, runtime_path.string());
+    const char* conda_prefix_cstr = std::getenv("CONDA_PREFIX");
+    if (!conda_prefix_cstr) {
+        llvm::report_fatal_error("CONDA_PREFIX environment variable not set.");
+    }
+    std::string conda_prefix(conda_prefix_cstr);
+    fs::path conda_prefix_path(conda_prefix);
+
+    static const auto libdevice_path = conda_prefix_path / "lib" / "libdevice.10.bc";
+    if (fs::exists(libdevice_path)) {
+      externLibs.try_emplace(libdevice, libdevice_path.string());
     } else {
-      // When using the Math Dialect, it is possible that some ops (e.g., log)
-      // are lowered to a function call. In this case, we need to link libdevice
-      // using its default path:
-      // [triton root dir]/python/triton/language/libdevice.10.bc
-      // TODO(Keren): handle external linkage other than libdevice?
-      static const auto this_file_path = std::filesystem::path(__FILE__);
-      static const auto compiletime_path = this_file_path.parent_path()
-                                               .parent_path()
-                                               .parent_path()
-                                               .parent_path() /
-                                           "python" / "triton" / "third_party" /
-                                           "cuda" / "lib" / "libdevice.10.bc";
-      if (!fs::exists(compiletime_path)) {
-        std::string error_msg = "Can't find libdevice at neither " +
-                                runtime_path.string() + " nor " +
-                                compiletime_path.string();
+        std::string error_msg = "Can't find libdevice.10.bc at " +
+                                libdevice_path.string();
         llvm::report_fatal_error(error_msg.c_str());
-      }
-      externLibs.try_emplace(libdevice, compiletime_path.string());
     }
   }
 
Index: triton/python/triton/tools/build_extern.py
===================================================================
--- triton.orig/python/triton/tools/build_extern.py	2023-11-02 16:11:36.064839000 -0500
+++ triton/python/triton/tools/build_extern.py	2023-11-03 15:21:45.556933327 -0500
@@ -296,9 +296,8 @@
         header_str += "@functools.lru_cache()\n"
         header_str += "def libdevice_path():\n"
         header_str += "    import torch\n"
-        header_str += "    third_party_dir =  os.path.join(os.path.dirname(os.path.abspath(__file__)), \"..\", \"third_party\")\n"
         header_str += "    if torch.version.hip is None:\n"
-        header_str += "        default = os.path.join(third_party_dir, \"cuda\", \"lib\", \"libdevice.10.bc\")\n"
+        header_str += "        default = os.path.join(os.environ[\"CONDA_PREFIX\"], \"lib\", \"libdevice.10.bc\")\n"
         header_str += "    else:\n"
         header_str += "        default = ''\n"
         header_str += "    return os.getenv(\"TRITON_LIBDEVICE_PATH\", default)\n"
Index: triton/python/triton/common/build.py
===================================================================
--- triton.orig/python/triton/common/build.py	2023-11-02 16:11:36.065026000 -0500
+++ triton/python/triton/common/build.py	2023-11-03 15:21:45.557800573 -0500
@@ -48,9 +48,9 @@
 
 @functools.lru_cache()
 def cuda_include_dir():
-    base_dir = os.path.join(os.path.dirname(__file__), os.path.pardir)
-    cuda_path = os.path.join(base_dir, "third_party", "cuda")
-    return os.path.join(cuda_path, "include")
+    #base_dir = os.path.join(os.path.dirname(__file__), os.path.pardir)
+    #cuda_path = os.path.join(base_dir, "third_party", "cuda")
+    return os.path.join(os.environ['CONDA_PREFIX'], "include")
 
 
 def _build(name, src, srcdir):
Index: triton/python/triton/language/math.py
===================================================================
--- triton.orig/python/triton/language/math.py	2023-11-02 16:11:36.064952000 -0500
+++ triton/python/triton/language/math.py	2023-11-03 15:21:45.558389737 -0500
@@ -7,9 +7,9 @@
 @functools.lru_cache()
 def libdevice_path():
     import torch
-    third_party_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "third_party")
+    #third_party_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "third_party")
     if torch.version.hip is None:
-        default = os.path.join(third_party_dir, "cuda", "lib", "libdevice.10.bc")
+        default = os.path.join(os.environ["CONDA_PREFIX"], "lib", "libdevice.10.bc")
     else:
         default = ''
     return os.getenv("TRITON_LIBDEVICE_PATH", default)
