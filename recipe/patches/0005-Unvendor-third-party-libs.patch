From 0c8b2725a78a081859b9890b7475644ed3f6adf4 Mon Sep 17 00:00:00 2001
From: Tobias Fischer <info@tobiasfischer.info>
Date: Sun, 7 May 2023 14:53:42 +1000
Subject: [PATCH 5/8] Unvendor third party libs

---
 CMakeLists.txt  |  3 ++-
 python/setup.py | 11 ++++++-----
 2 files changed, 8 insertions(+), 6 deletions(-)

Index: triton/CMakeLists.txt
===================================================================
--- triton.orig/CMakeLists.txt	2024-04-02 12:32:20.905629496 -0500
+++ triton/CMakeLists.txt	2024-04-02 12:38:56.281509679 -0500
@@ -42,7 +42,8 @@
 include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
 
 # Third-party
-include_directories(${PYBIND11_INCLUDE_DIR})
+# include_directories(${PYBIND11_INCLUDE_DIR})
+find_package(pybind11 REQUIRED)
 
 set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -D__STDC_FORMAT_MACROS  -fPIC -std=gnu++17 -fvisibility=hidden -fvisibility-inlines-hidden")
 
Index: triton/python/setup.py
===================================================================
--- triton.orig/python/setup.py	2024-04-02 12:32:20.906752701 -0500
+++ triton/python/setup.py	2024-04-02 12:40:15.374779126 -0500
@@ -239,7 +239,7 @@
             raise RuntimeError("Could not find user home directory")
         triton_cache_path = os.path.join(user_home, ".triton")
         # lit is used by the test suite
-        thirdparty_cmake_args = get_thirdparty_packages(triton_cache_path)
+        # thirdparty_cmake_args = get_thirdparty_packages(triton_cache_path)
         extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.path)))
         # create build directories
         if not os.path.exists(self.build_temp):
@@ -260,9 +260,10 @@
             "-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON",
             "-DPYTHON_INCLUDE_DIRS=" + python_include_dir,
         ]
-        if lit_dir is not None:
-            cmake_args.append("-DLLVM_EXTERNAL_LIT=" + lit_dir)
-        cmake_args.extend(thirdparty_cmake_args)
+        # cmake_args.extend()
+        # if lit_dir is not None:
+        #     cmake_args.append("-DLLVM_EXTERNAL_LIT=" + lit_dir)
+        # cmake_args.extend(thirdparty_cmake_args)
 
         # configuration
         cfg = get_build_type()
@@ -319,27 +320,27 @@
         subprocess.check_call(["cmake", "--build", ".", "--target", "mlir-doc"], cwd=cmake_dir)
 
 
-download_and_copy(
-    src_path="bin/ptxas",
-    variable="TRITON_PTXAS_PATH",
-    version="12.3.52",
-    url_func=lambda arch, version:
-    f"https://anaconda.org/nvidia/cuda-nvcc/12.3.52/download/linux-{arch}/cuda-nvcc-{version}-0.tar.bz2",
-)
-download_and_copy(
-    src_path="bin/cuobjdump",
-    variable="TRITON_CUOBJDUMP_PATH",
-    version="12.3.52",
-    url_func=lambda arch, version:
-    f"https://anaconda.org/nvidia/cuda-cuobjdump/12.3.52/download/linux-{arch}/cuda-cuobjdump-{version}-0.tar.bz2",
-)
-download_and_copy(
-    src_path="bin/nvdisasm",
-    variable="TRITON_NVDISASM_PATH",
-    version="12.3.52",
-    url_func=lambda arch, version:
-    f"https://anaconda.org/nvidia/cuda-nvdisasm/12.3.52/download/linux-{arch}/cuda-nvdisasm-{version}-0.tar.bz2",
-)
+# download_and_copy(
+#     src_path="bin/ptxas",
+#     variable="TRITON_PTXAS_PATH",
+#     version="12.3.52",
+#     url_func=lambda arch, version:
+#     f"https://anaconda.org/nvidia/cuda-nvcc/12.3.52/download/linux-{arch}/cuda-nvcc-{version}-0.tar.bz2",
+# )
+# download_and_copy(
+#     src_path="bin/cuobjdump",
+#     variable="TRITON_CUOBJDUMP_PATH",
+#     version="12.3.52",
+#     url_func=lambda arch, version:
+#     f"https://anaconda.org/nvidia/cuda-cuobjdump/12.3.52/download/linux-{arch}/cuda-cuobjdump-{version}-0.tar.bz2",
+# )
+# download_and_copy(
+#     src_path="bin/nvdisasm",
+#     variable="TRITON_NVDISASM_PATH",
+#     version="12.3.52",
+#     url_func=lambda arch, version:
+#     f"https://anaconda.org/nvidia/cuda-nvdisasm/12.3.52/download/linux-{arch}/cuda-nvdisasm-{version}-0.tar.bz2",
+# )
 
 setup(
     name=os.environ.get("TRITON_WHEEL_NAME", "triton"),
